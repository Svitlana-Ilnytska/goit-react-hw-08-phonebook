{"version":3,"file":"static/js/331.90b4ba07.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","views/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  useCreateContactMutation,\n  useEditContactMutation,\n  useFetchContactsQuery,\n} from \"../../redux/contacts/operations\";\nimport { useAuth } from '../../hooks';\n\nimport {\n  Button,\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  useToast,\n} from \"@chakra-ui/core\";\n\nexport default function ContactForm({\n  id,\n  nameItem,\n  numberItem,\n  onCloseModal,\n}) {\n  const [name, setName] = useState(nameItem);\n  const [number, setNumber] = useState(numberItem);\n  const {token} = useAuth();\n\n  const { data: contacts } = useFetchContactsQuery(token);\n  const [createContact] = useCreateContactMutation();\n  const [editContact] = useEditContactMutation();\n  const toast = useToast();\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        console.warn(`name - ${name} not matched`);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const contactName = {\n      name: name,\n      number: number,\n    };\n\n    const theSameContact = contacts?.some((contact) =>\n      contact.name.toLowerCase().includes(contactName.name.toLowerCase())\n    );\n\n    if (id) {\n      editContact({ id, contactName, token });\n      onCloseModal();\n      toast({\n        title: \"Contact saved.\",\n        description: \"We've updated your contact.\",\n        status: \"success\",\n        duration: 9000,\n        isClosable: true,\n      });\n    } else if (theSameContact) {\n      toast({\n        title: \"An error occurred.\",\n        description: `${contactName.name} is already in contacts.`,\n        status: \"error\",\n        duration: 9000,\n        isClosable: true,\n      });\n    } else {\n      createContact({ contactName, token });\n      toast({\n        title: \"Contact added.\",\n        description: \"We've created your contact.\",\n        status: \"success\",\n        duration: 9000,\n        isClosable: true,\n      });\n      reset();\n    }\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <Box my={8} textAlign=\"left\">\n      <form onSubmit={handleSubmit}>\n        <FormControl>\n          <FormLabel>Name </FormLabel>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            placeholder=\"Type name\"\n            pattern=\"^[a-zA-Zа-яА-Я\\\\s\\\\'-]+$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormControl>\n\n        <FormControl mt={4}>\n          <FormLabel> Number</FormLabel>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            placeholder=\"Type number\"\n            pattern=\"[+]?[0-9]{1,4}[-.\\\\s]?[()0-9]{1,3}[-.\\\\s]?[0-9]{1,4}[-.\\\\s]?[0-9]{1,4}[-.\\\\s]?[0-9]{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormControl>\n        {id ? (\n          <Button\n            variantColor=\"teal\"\n            width=\"45%\"\n            borderWidth={1}\n            mt={4}\n            type=\"submit\"\n          >\n            Save changes\n          </Button>\n        ) : (\n          <Button\n            variantColor=\"teal\"\n            width=\"full\"\n            borderWidth={1}\n            mt={4}\n            type=\"submit\"\n          >\n            Add contact\n          </Button>\n        )}\n      </form>\n    </Box>\n  );\n}\n\nContactForm.propTypes = {\n  id: PropTypes.string, \n  nameItem: PropTypes.string,\n  numberItem: PropTypes.string,\n  onCloseModal: PropTypes.func,\n};\n\nContactForm.defaultProps = {\n  id: \"\", \n  nameItem: \"\", \n  numberItem: \"\",\n};","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport filterContact from \"../../redux/contacts/contacts-actions\";\n\nimport { Input, Text } from \"@chakra-ui/core\";\n\nconst Filter = () => {\n  const value = useSelector((state) => state.filter);\n  const dispatch = useDispatch();\n\n  const handleFilter = (e) => dispatch(filterContact(e.target.value));\n\n  return (\n    <>\n      <Text textAlign=\"left\">Find contacts by name</Text>\n\n      <Input\n        mb={4}\n        type=\"text\"\n        value={value}\n        onChange={handleFilter}\n        placeholder=\"Search...\"\n      />\n    </>\n  );\n};\nexport default Filter;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport {\n  Button,\n  Heading,\n  Text,\n  Flex,\n  Icon,\n  Avatar,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/core\";\n\nimport { useDisclosure } from \"@chakra-ui/core\";\n\nexport default function ContactItem({ id, name, number, onDeleteContact }) {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const initialRef = React.useRef();\n  const finalRef = React.useRef();\n\n  return (\n    <>\n      <Flex\n        py={2}\n        px={2}\n        borderRadius=\"md\"\n        bg=\"white.50\"\n        w=\"full\"\n        border=\"1px\"\n        borderColor=\"teal.500\"\n        my={1}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        <Flex>\n          <Avatar mr={4} />\n          <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n            <Heading fontSize={18} color=\"teal.900\">\n              {name}\n            </Heading>\n            <Text>\n              <a href={`tel:${number}`}> {number}</a>\n            </Text>\n          </Flex>\n        </Flex>\n\n        <Flex>\n          <Button\n            variantColor=\"teal\"\n            variant=\"outline\"\n            width=\"100px\"\n            type=\"button\"\n            onClick={onOpen}\n          >\n            Edit <Icon name=\"edit\" size=\"18px\" ml={3} />\n          </Button>\n\n          <Button\n            ml={3}\n            variantColor=\"teal\"\n            width=\"100px\"\n            type=\"button\"\n            onClick={onDeleteContact}\n          >\n            Delete <Icon name=\"delete\" size=\"18px\" ml={3} />\n          </Button>\n        </Flex>\n      </Flex>\n\n      <Modal\n        disableEnforceFocus={false}\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Edit your contact</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody px={6}>\n            <ContactForm\n              id={id}\n              nameItem={name}\n              numberItem={number}\n              onCloseModal={onClose}\n            />\n\n            <Button\n              onClick={onClose}\n              width=\"45%\"\n              position=\"absolute\"\n              top=\"270px\"\n              right=\"28px\"\n            >\n              Cancel\n            </Button>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n} from \"../../redux/contacts/operations\";\nimport { useAuth } from '../../hooks';\nimport ContactItem from \"../ContactItem/ContactItem\";\n\nimport {\n  ListItem,\n  List,\n} from \"@chakra-ui/core\";\n\nconst filterAllContacts = (contacts, filter) => {\n  return contacts?.filter((contact) =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n};\n\nconst ContactList = () => {\n  const {token} = useAuth();\n  const { data: contacts } = useFetchContactsQuery(token);\n\n  const filterAll = useSelector((state) => state.filter);\n  const items = filterAllContacts(contacts, filterAll);\n\n  const [deleteContact] = useDeleteContactMutation();\n\n  return (\n    <List spacing={3} borderWidth=\"1px\" rounded=\"md\" overflow=\"hidden\">\n      {items?.map(({ id, name, number }) => (\n        <ListItem key={id}>\n          <ContactItem\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={() => deleteContact({ id, token })}\n          />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;","import React from \"react\";\n\nimport ContactForm from \"../../components/ContactForm/ContactForm\";\nimport Filter from \"../../components/Filter/Filter\";\nimport ContactList from \"../../components/ContactList/ContactList\";\n\nimport { Box, Heading, Flex } from \"@chakra-ui/core\";\n\nexport default function ContactsPage() {\n  return (\n    <div>\n      <Flex\n        minHeight=\"100vh\"\n        width=\"full\"\n        align=\"start\"\n        justifyContent=\"space-around\"\n        py={12}\n      >\n        <Box\n          borderWidth={1}\n          px={4}\n          width=\"full\"\n          maxWidth=\"500px\"\n          borderRadius={4}\n          textAlign=\"center\"\n          boxShadow=\"lg\"\n        >\n          <Heading className=\"text-center\">Phonebook</Heading>\n          <ContactForm />\n        </Box>\n        <Box\n          px={4}\n          width=\"full\"\n          maxWidth=\"600px\"\n          borderRadius={4}\n          textAlign=\"center\"\n        >\n          <Heading>Contacts</Heading>\n          <Filter />\n          <ContactList />\n        </Box>\n      </Flex>\n    </div>\n  );\n}"],"names":["ContactForm","_ref","id","nameItem","numberItem","onCloseModal","_useState","useState","_useState2","_slicedToArray","name","setName","_useState3","_useState4","number","setNumber","token","useAuth","contacts","useFetchContactsQuery","data","_useCreateContactMuta","useCreateContactMutation","createContact","_useEditContactMutati","useEditContactMutation","editContact","toast","useToast","handleChange","e","_e$target","target","value","console","warn","concat","reset","_jsx","Box","my","textAlign","children","_jsxs","onSubmit","preventDefault","contactName","theSameContact","some","contact","toLowerCase","includes","title","description","status","duration","isClosable","FormControl","FormLabel","Input","type","onChange","placeholder","pattern","required","mt","Button","variantColor","width","borderWidth","defaultProps","useSelector","state","filter","dispatch","useDispatch","_Fragment","Text","mb","filterContact","ContactItem","onDeleteContact","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","initialRef","React","finalRef","Flex","py","px","borderRadius","bg","w","border","borderColor","justifyContent","alignItems","Avatar","mr","flexDirection","Heading","fontSize","color","href","variant","onClick","Icon","size","ml","Modal","disableEnforceFocus","initialFocusRef","finalFocusRef","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","position","top","right","items","filterAllContacts","_useDeleteContactMuta","useDeleteContactMutation","deleteContact","List","spacing","rounded","overflow","map","ListItem","ContactsPage","minHeight","align","maxWidth","boxShadow","className","Filter","ContactList"],"sourceRoot":""}